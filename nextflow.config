/**************************** Basic parameters ****************************/
process.executor = 'pbspro'
process.queue = 'workq'

singularity.runOptions = ' --bind /hpcnfs/ '




params {

   // input output
   input                      = null
   outdir                     = null

   // references
   bowtie2db                  = "/hpcnfs/data/PGP/zhan/miniconda3/envs/mpa/lib/python3.7/site-packages/metaphlan/metaphlan_databases"
   control_db                 = "/hpcnfs/scratch/DIMA/test_zhan/metagenomics/relese_mpa44/" // path to control database to have the range of clades in healthy individuals

   // Boilerplate options
   publish_dir_mode           = 'copy'
   email_on_fail              = null
   plaintext_email            = false
   monochrome_logs            = false
   hook_url                   = null
   help                       = false
   version                    = false
   validate_params            = true
   show_hidden_params         = false
   schema_ignore_params       = 'genomes'

   // filtering
   ntop                       = 20 // number of top clades to keep

}


/**************************** Profiles ****************************/
profiles {
    debug { process.beforeScript = 'echo $HOSTNAME' }
    singularity {
        singularity.autoMounts = true
        singularity.enabled    = true
        charliecloud.enabled   = false
        docker.enabled         = false
        podman.enabled         = false
        shifter.enabled        = false
        conda.enabled          = false
        process.container = 'docker://yinxiu/clonal_evolution:latest'
    }
}


/**************************** Manifest ****************************************************/

manifest {
    name            = 'metagenomics'
    author          = """Yinxiu Zhan"""
    homePage        = 'https://github.com/zhanyinx/metagenomics'
    description     = """Metagenomics pipeline."""
    mainScript      = 'main.nf'
    nextflowVersion = '!>=22.10.1'
    version         = '1.0.0'
}



/**************************** Tower ****************************************************/
tower {
  enabled = false
}


/**************************** Configs ****************************************************/
includeConfig 'config/base.config'


// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}
